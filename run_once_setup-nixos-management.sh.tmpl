#!/bin/bash
# One-time setup script for NixOS configuration management
# This creates helpful aliases and documentation

set -euo pipefail

log() {
    echo -e "\033[0;34m[NIXOS-SETUP]\033[0m $1"
}

success() {
    echo -e "\033[0;32m[NIXOS-SETUP]\033[0m $1"
}

log "Setting up NixOS configuration management..."

# Add helpful aliases to bashrc if not already present
BASHRC="$HOME/.bashrc"
ALIASES_BLOCK="
# NixOS Configuration Management (added by chezmoi)
alias nixos-edit='chezmoi edit system_nixos/configuration.nix'
alias nixos-apply='chezmoi apply && echo \"NixOS configs deployed via chezmoi!\"'
alias nixos-diff='chezmoi diff'
alias nixos-status='chezmoi status'
alias nixos-rebuild-test='sudo nixos-rebuild test'
alias nixos-rebuild-boot='sudo nixos-rebuild boot'
"

if ! grep -q "NixOS Configuration Management" "$BASHRC" 2>/dev/null; then
    log "Adding helpful aliases to ~/.bashrc..."
    echo "$ALIASES_BLOCK" >> "$BASHRC"
    success "Aliases added! Source ~/.bashrc or restart terminal to use them."
else
    log "Aliases already exist in ~/.bashrc"
fi

# Create documentation
DOC_FILE="{{ .chezmoi.sourceDir }}/NIXOS_MANAGEMENT.md"
if [[ ! -f "$DOC_FILE" ]]; then
    log "Creating documentation at $DOC_FILE..."
    cat > "$DOC_FILE" << 'EOF'
# NixOS Configuration Management with Chezmoi

This repository now manages your NixOS system configuration alongside your dotfiles.

## Directory Structure

```
~/.local/share/chezmoi/
├── system_nixos/              # NixOS configuration files
│   ├── configuration.nix      # Main system configuration
│   ├── flake.nix             # Nix flake configuration
│   ├── flake.lock            # Flake lock file
│   ├── hardware-configuration.nix
│   └── gemini-cli.nix        # Custom module
├── run_onchange_deploy-nixos.sh.tmpl  # Deployment script
└── run_once_setup-nixos-management.sh.tmpl  # This setup script
```

## Workflow

### 1. Edit NixOS Configuration
```bash
# Edit main configuration
chezmoi edit system_nixos/configuration.nix

# Or edit directly with your editor
nvim ~/.local/share/chezmoi/system_nixos/configuration.nix
```

### 2. Deploy Changes
```bash
# Apply all changes (this will automatically deploy NixOS configs)
chezmoi apply

# Or use the convenient alias
nixos-apply
```

### 3. Useful Commands
```bash
# Check what would change
chezmoi diff
# or
nixos-diff

# Check status
chezmoi status
# or  
nixos-status

# Test configuration without switching
sudo nixos-rebuild test
# or
nixos-rebuild-test

# Prepare for next boot (safer)
sudo nixos-rebuild boot
# or
nixos-rebuild-boot
```

## Safety Features

- **Automatic backups**: Each deployment creates a backup in `/tmp/nixos-backup-TIMESTAMP`
- **Validation**: Configuration is validated before deployment
- **Rollback**: Failed deployments automatically restore from backup
- **File checksums**: Only deploys when configuration files actually change

## Manual Override

If you need to bypass chezmoi and work directly with NixOS:

```bash
# Edit directly (not recommended for regular use)
sudo nvim /etc/nixos/configuration.nix

# Rebuild without chezmoi
sudo nixos-rebuild switch
```

## Troubleshooting

1. **Deployment fails**: Check the error message, backup is automatically restored
2. **Files out of sync**: Run `chezmoi apply` to sync from source
3. **Emergency restore**: Backups are in `/tmp/nixos-backup-*` directories

## Adding New Files

To add new NixOS configuration files:

```bash
# Copy to chezmoi source
cp /etc/nixos/newfile.nix ~/.local/share/chezmoi/system_nixos/

# Add to chezmoi
chezmoi add ~/.local/share/chezmoi/system_nixos/newfile.nix

# Commit to git
cd ~/.local/share/chezmoi && git add . && git commit -m "add new nixos configuration"
```
EOF
    success "Documentation created at $DOC_FILE"
fi

success "NixOS configuration management setup complete!"
success ""
success "Quick start:"
success "1. Edit configs:  chezmoi edit system_nixos/configuration.nix"
success "2. Deploy:        chezmoi apply"
success "3. Check status:  chezmoi status"
success ""
success "See $DOC_FILE for full documentation."