# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# Modern tool aliases are now in ~/.bash_aliases
# Traditional aliases kept as fallback
alias ll_old='ls -alF'
alias la_old='ls -A'
alias l_old='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

neofetch
#PS1="$"
alias dotfiles='/usr/bin/git --git-dir=/home/$USER/dotfiles --work-tree=/home/$USER'
#. $HOME/.local/lib/python3.8/site-packages/powerline/bindings/bash/powerline.sh
# Powerline configuration - find script using daemon path
if command -v powerline-daemon >/dev/null 2>&1; then
  POWERLINE_BIN=$(readlink -f $(which powerline-daemon))
  POWERLINE_STORE_PATH=$(echo "$POWERLINE_BIN" | sed 's|/bin/.*||')
  POWERLINE_BASH_SCRIPT="$POWERLINE_STORE_PATH/share/bash/powerline.sh"
  
  if [ -f "$POWERLINE_BASH_SCRIPT" ]; then
    powerline-daemon -q
    POWERLINE_BASH_CONTINUATION=1
    POWERLINE_BASH_SELECT=1
    source "$POWERLINE_BASH_SCRIPT"
  fi
fi

# === File Manager Configurations ===
# Source nnn configuration for enhanced file management
if [ -f ~/.config/nnn/nnn-config.sh ]; then
    source ~/.config/nnn/nnn-config.sh
fi

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('$HOME/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
#    eval "$__conda_setup"
#else
#    if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
#        . "$HOME/anaconda3/etc/profile.d/conda.sh"
#    else
#        export PATH="$HOME/anaconda3/bin:$PATH"
#    fi
#fi
#unset __conda_setup
# <<< conda initialize <<<


export PATH="$PATH:/opt/nvim/"
export EDITOR="nvim"
export VISUAL="nvim"

# if [ -x "$(command -v fzf)"  ]; then
#    source /data/data/com.termux/files/usr/share/fzf/key-bindings.bash
# fi

if [ -x "$(command -v fzf)" ]; then
    if [ -n "$ANDROID_ROOT" ] && [ -n "$PREFIX" ]; then
        # We're in Termux
        source /data/data/com.termux/files/usr/share/fzf/key-bindings.bash
    elif [ -f "$(dirname $(which fzf))/../share/fzf/key-bindings.bash" ]; then
        # NixOS - fzf is in the store
        source "$(dirname $(which fzf))/../share/fzf/key-bindings.bash"
    elif [ -f /usr/share/doc/fzf/examples/key-bindings.bash ]; then
        # Ubuntu/Debian systems
        source /usr/share/doc/fzf/examples/key-bindings.bash
    fi
fi

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND"

# Add these aliases to your ~/.bashrc or ~/.bash_profile

# File Finder
alias ffind='fzf --preview "cat {}"'

# Directory Navigation
alias fcd='cd $(find . -type d | fzf)'

# Shell History Search
# alias fhist='eval "$(history | fzf --bind=ctrl-r:accept --tac --preview \"echo {}\" | sed \"s/ *[0-9]* *//\")"'
alias fhist='eval "$(history | fzf --bind=ctrl-r:accept --tac --preview="echo {}" | sed -E "s/^[ ]*[0-9]+[ ]*//")"'
# alias fhist='eval "$(history | fzf --bind=ctrl-r:accept --tac --preview="echo {}" | sed "s/^[ ]*[0-9]\+[ ]*//")"'


# Git Checkout Branch
alias gco='git checkout $(git branch --all | fzf)'

# Git Files
alias gf='git ls-files | fzf'

# Kill Processes
alias fkill='kill -9 $(ps -ef | fzf | awk "{print $2}")'

# SSH Connections
alias fssh='ssh $(cat ~/.ssh/config | grep "Host " | awk "{print $2}" | fzf)'

# Ripgrep Integration
alias frg='rg --files | fzf --preview "rg --color=always {}"'

# Select and Export Environment Variables
alias fenv='export $(printenv | fzf)'

# Chezmoi Integration
alias fchezmoi='chezmoi edit $(chezmoi managed | fzf)'

# Clipboard Manager
alias fclip='xclip -o | fzf | xclip -selection clipboard'

# Custom Command Palette
alias fcmd='echo -e "update\nclean\nbackup" | fzf | xargs -I {} bash -c "{}"'

# Todo List Management
alias ftodo='cat ~/todo.txt | fzf --preview "echo {}"'

# Open Files at Specific Lines
alias fvim='vim $(rg --line-number "" | fzf --delimiter : --nth 1,2,3)'

# Save the script to your ~/.bashrc or ~/.bash_profile
#cat << 'EOF' >> ~/.bashrc

# File Finder
alias ffind='fzf --preview "cat {}"'

# Directory Navigation
alias fcd='cd $(find . -type d | fzf)'

# Shell History Search
#alias fhist='eval "$(history | fzf --bind=ctrl-r:accept --tac --preview \"echo {}\" | sed \"s/ *[0-9]* *//\")"'

# Git Checkout Branch
alias gco='git checkout $(git branch --all | fzf)'

# Git Files
alias gf='git ls-files | fzf'

# Kill Processes
alias fkill='kill -9 $(ps -ef | fzf | awk "{print $2}")'

# SSH Connections
alias fssh='ssh $(cat ~/.ssh/config | grep "Host " | awk "{print $2}" | fzf)'

# Ripgrep Integration
alias frg='rg --files | fzf --preview "rg --color=always {}"'

# Select and Export Environment Variables
alias fenv='export $(printenv | fzf)'

# Chezmoi Integration
alias fchezmoi='chezmoi edit $(chezmoi managed | fzf)'

# Clipboard Manager
alias fclip='xclip -o | fzf | xclip -selection clipboard'

# Custom Command Palette
alias fcmd='echo -e "update\nclean\nbackup" | fzf | xargs -I {} bash -c "{}"'

# Todo List Management
alias ftodo='cat ~/todo.txt | fzf --preview "echo {}"'

# Open Files at Specific Lines
alias fvim='vim $(rg --line-number "" | fzf --delimiter : --nth 1,2,3)'



# alias for searching command history using fzf
# alias sc='eval "$(cat ~/.bash_history | fzf)"'
# alias sc='fc -s $(cat ~/.bash_history | fzf)'
# alias sc='BUFFER=$(cat ~/.bash_history | fzf) && echo "$BUFFER"' > `tty`

#alias sc='BUFFER=$(cat ~/.bash_history | fzf); if [ -n "$BUFFER" ]; then print -z "$BUFFER"; fi'

#alias ffc='bind "$(cat ~/.bash_history | fzf | sed "s/\'/\\\\\'/g" | awk "{print \"\\e[2K\\e[1G\\e[$((${#BASH} - ${#BASH#*@}) + 1))H\" \$0}")"; echo'

# Explanation:cat ~/.bash_history | fzf selects a command from your history.sed "s/\'/\\\\\'/g" escapes single quotes.awk "{print \"\\e[2K\\e[1G\\e[$((${#BASH} - ${#BASH#*@}) + 1))H\" \$0}" formats the command to be used with the bind command.bind inserts the command into your current command line for editing.To use this alias, add it to your .bashrc or .bash_profile file and then source the file:
#

#sc(){
#  local cmd=$(cat ~/.bash_history | fzf)
#  if [ -n "$cmd" ]; then
#    READLINE_LINE="$cmd"
#    READLINE_POINT=${#cmd}
#  fi
#}
#bind -x '"\C-r": sc'

#ffc() {
#  local cmd
#  cmd=$(cat ~/.bash_history | fzf)
#  if [ -n "$cmd" ]; then
#    # Insert the command into the current command line
#    READLINE_LINE="${READLINE_LINE:+$READLINE_LINE }$cmd"
#    READLINE_POINT=${#READLINE_LINE}
#  fi
#}

#bind -x '"\C-r": ffc'

# === Modern Shell Enhancements ===

# Better default editor
export EDITOR="nvim"
export VISUAL="nvim"

# Modern tool configurations
export BAT_THEME="ansi"
export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'

# Improved history settings
export HISTSIZE=10000
export HISTFILESIZE=20000
export HISTTIMEFORMAT="%F %T "
export HISTCONTROL=ignoredups:erasedups

# Better less defaults
export LESS='-R -S -M -I -F'
export LESSOPEN='|bat --color=always %s'

# Ripgrep configuration
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

# Git configuration for delta (already configured globally)
# Delta provides better git diff output automatically

# Auto-completion enhancements
# Enable ** globbing
shopt -s globstar

# Better tab completion for modern tools
if command -v eza >/dev/null; then
    complete -F _longopt eza
fi

# Load modern aliases if available
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# === File Manager Trinity Configuration ===

# Load nnn configuration

# File Manager Aliases and Functions
alias fm-help='echo "File Manager Trinity:"; echo "n/nnn    - Fast single-pane (contexts)"; echo "lf       - Miller columns (3-pane)"; echo "ranger   - Rich Python-based"; echo ""; echo "Quick start: nh/lh/rh for home directory"'

# nnn (already configured above)
# Enhanced aliases for lf
alias lf='lf'
alias lh='cd ~ && lf'
alias ld='cd ~/Downloads && lf'
alias lp='cd ~/Projects && lf'
alias lc='cd ~/.config && lf'
alias ls-nix='cd ~/system_nixos && lf'

# ranger aliases
alias ranger='ranger'
alias rh='cd ~ && ranger'
alias rd='cd ~/Downloads && ranger'
alias rp='cd ~/Projects && ranger'
alias rc='cd ~/.config && ranger'
alias rs='cd ~/.local/share/chezmoi && ranger'
alias rn='cd ~/system_nixos && ranger'

# Quick comparison function
compare_fm() {
    echo "🗂️  File Manager Trinity Comparison"
    echo ""
    echo "📁 nnn (n):"
    echo "   • Fastest startup (~20ms)"
    echo "   • Single-pane + contexts (1,2,3,4 keys)"
    echo "   • Minimal resource usage"
    echo "   • Extensive plugin system"
    echo ""
    echo "📂 lf (lf):"
    echo "   • Miller columns (3-pane view)"
    echo "   • Go-based, very fast (~50ms)"
    echo "   • Vi-like keybindings"
    echo "   • Server mode for sync"
    echo ""
    echo "📋 ranger (ranger):"
    echo "   • Rich preview system"
    echo "   • Python-based customization"
    echo "   • Extensive integrations"
    echo "   • Full-featured (~200ms startup)"
    echo ""
    echo "💡 Quick start: nh/lh/rh (home), nd/ld/rd (downloads)"
}

alias fm-compare='compare_fm'

# Display system info on shell start (already have neofetch)
# Add a separator for clarity
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

